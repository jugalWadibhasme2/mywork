package com.app.service;

import java.util.List;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.app.Exception.ApiException;
import com.app.Exception.ResourceNotFoundException;
import com.app.dto.DoctorDto;
import com.app.dto.DoctorSignup;
import com.app.entities.Doctor;
import com.app.repository.IDoctorRepo;


@Service
@Transactional
public class DoctorServiceImpl implements DoctorService {

    @Autowired
    private IDoctorRepo doctorDao;

    @Autowired
    private ModelMapper mapper;

    @Autowired
    private PasswordEncoder encoder;


    @Override
    public DoctorSignup doctorRegistration(DoctorSignup reqDTO) {
        // TODO Auto-generated method stub
        Doctor doctor = mapper.map(reqDTO, Doctor.class);
        if(doctorDao.exsitsbyId(reqDTO.getDoctorId())){
            throw new ApiException("Doctor Id not found");
        }

        doctor.setPassword(encoder.encode(doctor.getPassword()));
        return mapper.map(doctorDao.save(doctor), DoctorSignup.class);
        
    }

    @Override
    public List<DoctorDto> displayAllDoctor() {
        // TODO Auto-generated method stub
        List<Doctor> doctors = doctorDao.findAll();
        return doctors.stream().map(doctor->mapper.map(doctor,DoctorDto.class)).collect(Collectors.toList());
        
    }

    @Override
    public void deleteDoctor(int id) {
        // TODO Auto-generated method stub
        Doctor doctor = doctorDao.findById(id).orElseThrow(() -> new RuntimeException("Doctor not found"));
		doctorDao.delete(doctor);
    }

    @Override
    public DoctorDto updateDoctor(int id, DoctorDto updateDoctor) {
        // TODO Auto-generated method stub
        Doctor doctor=doctorDao.findById(id)
				.orElseThrow(()-> new ResourceNotFoundException("Merchant not found with ID: " + id));
		
		mapper.map(updateDoctor, doctor);
		
		doctor=doctorDao.save(doctor);
		
		return mapper.map(doctor, DoctorDto.class);
    }

}
